---

---
<aside class=" transition-all fixed bottom-2 right-2 z-10 hover:bg-[#acf1bd] hover:bg-opacity-70 hover:backdrop-blur-sm rounded-lg p-2 hover:p-3">
  <picture>
    <img id="jiji" src="/public/img/icons/songPlayer/icon_audio.svg" alt="" class="w-12">
  </picture>
  <audio id="songPlayer" autoplay></audio>
  <main id="customControls" class="hidden">
    <button id="prevBtn" class="rounded-full active:scale-110">
      <img src="/public/img/icons/songPlayer/next_preview.svg" alt="" class="w-10">
    </button>
    <button id="playPauseBtn" class="rounded-full active:scale-110">
      <img id="iconPlayer" src="/public/img/icons/songPlayer/play.svg" alt="" class="w-10">
    </button>
    <button id="nextBtn" class="rounded-full active:scale-110">
      <img src="/public/img/icons/songPlayer/next_preview.svg" alt="" class="w-10 -scale-x-[1]">
    </button>
    <section>
      <input type="range" name="" id="volControl" min="0" max="1" step=".01" value=".2" class="accent-[#003449]">
    </section>
  </main>
</aside>

<style>
  aside:hover picture{
    display: none;
  }
  aside:hover main{
    display: block;
  }
</style>

<script>
const playList: string[] = [
  '/public/music/msc01.mp3',
  '/public/music/msc02.mp3',
  '/public/music/msc03.mp3'
];

let currentIndex: number = 0;
const songPlayer = document.getElementById('songPlayer') as HTMLAudioElement;
const playPauseBtn = document.getElementById('playPauseBtn') as HTMLButtonElement;
const prevBtn = document.getElementById('prevBtn') as HTMLButtonElement;
const nextBtn = document.getElementById('nextBtn') as HTMLButtonElement;
const volControl = document.getElementById('volControl') as HTMLInputElement;
const iconPlayer = document.getElementById('iconPlayer') as HTMLImageElement;

// Función para cargar música
function loadSong(index: number): void {
  songPlayer.src = playList[index];
  songPlayer.play();
  iconPlayer.src = '/public/img/icons/songPlayer/pause.svg'
}

// Cargar la primera música
songPlayer.volume=.2
loadSong(currentIndex);

// Evento para cargar la siguiente música
songPlayer.addEventListener('ended', () => {
  currentIndex = (currentIndex + 1) % playList.length;
  loadSong(currentIndex);
});

// Control de reproducción/pausa
playPauseBtn.addEventListener('click', () => {
  if (songPlayer.paused) {
    songPlayer.play();
    iconPlayer.src = '/public/img/icons/songPlayer/pause.svg'
  } else {
    songPlayer.pause();
    iconPlayer.src = '/public/img/icons/songPlayer/play.svg'
  }
});

// Control de música anterior
prevBtn.addEventListener('click', () => {
  currentIndex = (currentIndex - 1 + playList.length) % playList.length;
  loadSong(currentIndex);
});

// Control de siguiente música
nextBtn.addEventListener('click', () => {
  currentIndex = (currentIndex + 1) % playList.length;
  loadSong(currentIndex);
});

// Control de volumen
volControl.addEventListener('input', () => {
  songPlayer.volume = parseFloat(volControl.value);
});
</script>